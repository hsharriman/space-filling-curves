#Base Python
from typing import Tuple
import math
from tsp import setup, dict_to_coords


#CONSTANTS
GRID_POINTS = 300
array = [(-150.0, 150.0), (-130.0, 150.0), (-130.0, 130.0), (-150.0, 130.0), (-150.0, 110.0), (-150.0, 90.0), (-130.0, 90.0), (-130.0, 110.0), (-110.0, 110.0), (-110.0, 90.0), (-90.0, 90.0), (-90.0, 110.0), (-90.0, 130.0), (-110.0, 130.0), (-110.0, 150.0), (-90.0, 150.0), (-70.0, 150.0), (-70.0, 130.0), (-50.0, 130.0), (-50.0, 150.0), (-30.0, 150.0), (-10.0, 150.0), (-9.999999999999998, 130.0), (-30.0, 130.0), (-30.0, 110.0), (-10.0, 110.0), (-9.999999999999998, 90.0), (-30.0, 90.0), (-50.0, 90.0), (-50.00000000000001, 110.0), (-70.0, 110.0), (-70.0, 90.0), (-70.0, 70.0), (-70.0, 50.0), (-50.0, 50.0), (-50.0, 70.0), (-30.0, 70.0), (-10.0, 70.0), (-9.999999999999998, 50.0), (-30.0, 50.0), (-30.0, 30.0), (-10.0, 30.0), (-9.999999999999998, 10.0), (-30.0, 9.999999999999998), (-50.0, 9.999999999999996), (-50.00000000000001, 29.999999999999996), (-70.0, 29.999999999999993), (-70.0, 9.999999999999993), (-90.0, 9.999999999999991), (-110.0, 9.99999999999999), (-110.0, 29.99999999999999), (-90.0, 29.999999999999993), (-90.0, 49.99999999999999), (-90.0, 70.0), (-110.0, 70.0), (-110.0, 50.0), (-130.0, 50.0), (-130.0, 70.0), (-150.0, 70.0), (-150.0, 50.0), (-150.0, 30.0), (-130.0, 30.0), (-130.0, 10.0), (-150.0, 9.999999999999998), (-150.0, -10.000000000000002), (-150.0, -30.0), (-130.0, -30.0), (-130.0, -10.0), (-110.0, -10.0), (-90.0, -10.0), (-90.0, -30.0), (-110.0, -30.000000000000004), (-110.0, -50.0), (-90.0, -50.0), (-90.0, -70.0), (-110.0, -70.0), (-130.0, -70.0), (-130.0, -50.0), (-150.0, -50.0), (-150.0, -70.0), (-150.0, -90.0), (-130.0, -90.0), (-130.0, -110.0), (-150.0, -110.0), (-150.0, -130.0), (-150.0, -150.0), (-130.0, -150.0), (-130.0, -130.0), (-110.0, -130.0), (-110.0, -150.0), (-90.0, -150.0), (-90.0, -130.0), (-90.0, -110.0), (-110.0, -110.0), (-110.0, -90.0), (-90.0, -90.0), (-70.0, -90.0), (-50.0, -90.0), (-50.0, -110.0), (-70.0, -110.0), (-70.0, -130.0), (-70.0, -150.0), (-50.0, -150.0), (-50.0, -130.0), (-30.0, -130.0), (-30.0, -150.0), (-10.0, -150.0), (-9.999999999999998, -130.0), (-9.999999999999996, -110.0), (-29.999999999999996, -110.0), (-29.999999999999996, -90.0), (-9.999999999999996, -90.0), (-9.999999999999995, -70.0), (-9.999999999999993, -50.0), (-29.999999999999993, -50.0), (-29.999999999999996, -70.0), (-50.0, -70.0), (-70.0, -70.0), (-70.0, -50.0), (-50.0, -50.0), (-50.0, -30.0), (-70.0, -29.999999999999996), (-70.0, -9.999999999999996), (-50.0, -9.999999999999996), (-30.0, -9.999999999999996), (-30.0, -29.999999999999996), (-10.0, -29.999999999999996), (-9.999999999999998, -9.999999999999996), (10.000000000000002, -9.999999999999996), (10.000000000000004, -29.999999999999996), (30.000000000000004, -29.999999999999996), (30.000000000000004, -9.999999999999996), (50.0, -9.999999999999996), (70.0, -9.999999999999996), (70.0, -29.999999999999996), (50.0, -30.0), (50.0, -50.0), (70.0, -50.0), (70.0, -70.0), (50.0, -70.0), (30.0, -70.0), (29.999999999999996, -50.0), (9.999999999999996, -50.0), (9.999999999999998, -70.0), (10.0, -90.0), (30.0, -90.0), (30.0, -110.0), (10.0, -110.0), (10.000000000000002, -130.0), (10.000000000000004, -150.0), (30.000000000000004, -150.0), (30.000000000000004, -130.0), (50.0, -130.0), (50.0, -150.0), (70.0, -150.0), (70.0, -130.0), (70.0, -110.0), (50.0, -110.0), (50.0, -90.0), (70.0, -90.0), (90.0, -90.0), (110.0, -90.0), (110.0, -110.0), (90.0, -110.0), (90.0, -130.0), (90.0, -150.0), (110.0, -150.0), (110.0, -130.0), (130.0, -130.0), (130.0, -150.0), (150.0, -150.0), (150.0, -130.0), (150.0, -110.0), (130.0, -110.0), (130.0, -90.0), (150.0, -90.0), (150.0, -70.0), (150.0, -50.0), (130.0, -50.0), (130.0, -70.0), (110.0, -70.0), (90.0, -70.0), (90.0, -50.0), (110.0, -50.0), (110.0, -30.0), (90.0, -29.999999999999996), (90.0, -9.999999999999996), (110.0, -9.999999999999996), (130.0, -9.999999999999996), (130.0, -29.999999999999996), (150.0, -29.999999999999996), (150.0, -9.999999999999996), (150.0, 10.000000000000004), (130.0, 10.000000000000005), (130.0, 30.000000000000007), (150.0, 30.000000000000007), (150.0, 50.00000000000001), (150.0, 70.0), (130.0, 70.0), (130.0, 50.0), (110.0, 50.0), (110.0, 70.0), (90.0, 70.0), (90.0, 50.0), (90.0, 30.0), (110.0, 29.999999999999996), (110.0, 9.999999999999996), (90.0, 9.999999999999998), (70.0, 10.0), (70.0, 30.0), (50.0, 30.000000000000004), (49.99999999999999, 10.000000000000004), (29.999999999999993, 10.000000000000005), (9.999999999999993, 10.000000000000007), (9.999999999999995, 30.000000000000007), (29.999999999999993, 30.000000000000007), (29.999999999999993, 50.00000000000001), (9.999999999999993, 50.00000000000001), (9.999999999999995, 70.0), (29.999999999999993, 70.0), (49.99999999999999, 70.0), (49.99999999999999, 50.0), (70.0, 50.0), (70.0, 70.0), (70.0, 90.0), (70.0, 110.0), (50.0, 110.0), (49.99999999999999, 90.0), (29.999999999999993, 90.0), (9.999999999999993, 90.0), (9.999999999999995, 110.0), (29.999999999999993, 110.0), (29.999999999999993, 130.0), (9.999999999999993, 130.0), (9.999999999999995, 150.0), (29.999999999999993, 150.0), (49.99999999999999, 150.0), (49.99999999999999, 130.0), (70.0, 130.0), (70.0, 150.0), (90.0, 150.0), (110.0, 150.0), (110.0, 130.0), (90.0, 130.0), (90.0, 110.0), (90.0, 90.0), (110.0, 90.0), (110.0, 110.0), (130.0, 110.0), (130.0, 90.0), (150.0, 90.0), (150.0, 110.0), (150.0, 130.0), (130.0, 130.0), (130.0, 150.0), (150.0, 150.0)]

# generate 10 random points in 300x300 grid\

P, _ = setup(10, GRID_POINTS)
P = dict_to_coords(P)

def calc_distance(point1: Tuple[int, int], point2: Tuple[int,int]):
    return math.sqrt((point2[1] - point1[1])**2 + (point2[0] - point1[0])**2)

indexes = []
print(len(array))

for point in P:
    min_dist_curve_1 = GRID_POINTS
    min_dist_curve_2 = GRID_POINTS
    min_dist_curve_1_index = 0
    min_dist_curve_2_index = 0

    for i, space_point in enumerate(array):
        distance = calc_distance(point, space_point)
        if distance < min_dist_curve_1:
            min_dist_curve_1 = distance
            min_dist_curve_1_index = i
        elif distance < min_dist_curve_2:
            min_dist_curve_2 = distance
            min_dist_curve_2_index = i
    ratio = min_dist_curve_1/ (min_dist_curve_1+min_dist_curve_2)
    index = (min_dist_curve_2_index -min_dist_curve_1_index) * ratio + min_dist_curve_1_index
    print(min_dist_curve_1_index)
    print(min_dist_curve_2_index)
    indexes.append(
        (index, point, array[min_dist_curve_1_index], array[min_dist_curve_2_index],
         min_dist_curve_1, min_dist_curve_2,
         min_dist_curve_1_index, min_dist_curve_2_index)
    )
indexes.sort(key=lambda x: x[0])
from pprint import pprint
import pdb; pdb.set_trace()
    
